{"name":"Node-mongodb-schema-validator","body":"node-mongodb-schema-tester -  A schema tester for node and MongoDB\r\n================================================================\r\n\r\nUse https://github.com/JamesCropcho/variety to validate the schema found in a mongodb collection using node.\r\n\r\nNode-mongo-schema-tester allows you to perform some actions against a mongo database, then test the shape of the resulting data against a set of expectations.\r\n\r\nFor example if you have a collection of people, you can check that all of the objects contain a field \"name\" and that they are all strings.\r\n\r\nRequirements\r\n============\r\n\r\nnode-mongo-schema-tester uses https://github.com/JamesCropcho/variety and http://mongodb.github.com/node-mongodb-native/\r\n\r\nWarnings\r\n========\r\n\r\nAs per the warning for variety: \"I have every reason to believe this tool will not corrupt your data or harm your computer. But if I were you, I would not use it in a production environment.\"\r\n\r\nYou have been warned\r\n\r\nUsage\r\n=====\r\n\r\nFirst you need to have a handle to a mongo collection:\r\n\r\n```\r\nvar testCollection;\r\nvar client = new mongo.Db('collectionName', new mongo.Server(\"127.0.0.1\", 27017));\r\nclient.open(function (err, db) {\r\n  testCollection = db.collection('node_mongo_schema_tester_tests');\r\n});\r\n```\r\n\r\nNow lets put some test data in:\r\n\r\n```\r\n var people = [];\r\n    people.push({name:'Alice', age:29, hasCar:true, optionalProperty:42, multiTypes:\"aString\", nested:{inner:'value'}})\r\n    people.push({name:'Bob', age:32, hasCar:true, multiTypes:33})\r\n\r\n    testCollection.insert(people);\r\n```\r\n\r\nWe can define a set of expectations in the form:\r\n\r\n```\r\n{'keyName': {types : ['string', 'number'], optional : true}\r\n{'outerObject': {types : ['string', 'number'], optional : true}\r\n```\r\n\r\nand run it against the database:\r\n\r\n```\r\nvalidator.validate(testCollection, expectations, function (err, data) {});\r\n```\r\n\r\nThe callback will return a list of errors if there are any unexpected keys or they have wrong data types e.g.\r\n\r\n    errors: [ 'Found unexpected key: \"hasCar\" of type(s) [\"boolean\"]' ]\r\n\r\nExample\r\n=======\r\n\r\nRun node example.js in the examples folder.","tagline":"Use variety.js to validate the schema found in a mongodb collection using node.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}